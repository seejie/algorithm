const insertSort = arr => {
  const len = arr.length
  let prevIdx
  let curr
  for (let i = 1; i < len; i++){
    prevIdx = i - 1
    curr = arr[i]
    // 在已排序序列中从后向前扫描比较，插入到合适的位置
    while (prevIdx >= 0 && arr[prevIdx] > curr) {
      arr[prevIdx + 1] = arr[prevIdx]
      prevIdx--
      console.log(`第${i}次循环`, arr.toString())
    }
    console.log(`第${i}次循环`, arr.toString())
    arr[prevIdx + 1] = curr
  }
  return arr
}

const arr = [1, 6, 7, 4, 5, 8, 9, 0, 2, 3]
console.log(insertSort(arr), '-----insertSort(arr)-----')
// 第1次循环 1,6,7,4,5,8,9,0,2,3
// 第2次循环 1,6,7,4,5,8,9,0,2,3
// 第3次循环 1,6,7,7,5,8,9,0,2,3
// 第3次循环 1,6,6,7,5,8,9,0,2,3
// 第3次循环 1,6,6,7,5,8,9,0,2,3
// 第4次循环 1,4,6,7,7,8,9,0,2,3
// 第4次循环 1,4,6,6,7,8,9,0,2,3
// 第4次循环 1,4,6,6,7,8,9,0,2,3
// 第5次循环 1,4,5,6,7,8,9,0,2,3
// 第6次循环 1,4,5,6,7,8,9,0,2,3
// 第7次循环 1,4,5,6,7,8,9,9,2,3
// 第7次循环 1,4,5,6,7,8,8,9,2,3
// 第7次循环 1,4,5,6,7,7,8,9,2,3
// 第7次循环 1,4,5,6,6,7,8,9,2,3
// 第7次循环 1,4,5,5,6,7,8,9,2,3
// 第7次循环 1,4,4,5,6,7,8,9,2,3
// 第7次循环 1,1,4,5,6,7,8,9,2,3
// 第7次循环 1,1,4,5,6,7,8,9,2,3
// 第8次循环 0,1,4,5,6,7,8,9,9,3
// 第8次循环 0,1,4,5,6,7,8,8,9,3
// 第8次循环 0,1,4,5,6,7,7,8,9,3
// 第8次循环 0,1,4,5,6,6,7,8,9,3
// 第8次循环 0,1,4,5,5,6,7,8,9,3
// 第8次循环 0,1,4,4,5,6,7,8,9,3
// 第8次循环 0,1,4,4,5,6,7,8,9,3
// 第9次循环 0,1,2,4,5,6,7,8,9,9
// 第9次循环 0,1,2,4,5,6,7,8,8,9
// 第9次循环 0,1,2,4,5,6,7,7,8,9
// 第9次循环 0,1,2,4,5,6,6,7,8,9
// 第9次循环 0,1,2,4,5,5,6,7,8,9
// 第9次循环 0,1,2,4,4,5,6,7,8,9
// 第9次循环 0,1,2,4,4,5,6,7,8,9
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
